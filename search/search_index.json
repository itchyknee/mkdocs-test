{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Playbook About us C ollaborative A dventurous R eliable E nergetic a catalyst for better health the delivery partner of choice for the NHS We aim to be an organisation that delivers by focusing on users, introducing new ways of working and using technology & insight as an enabler for change. This is our playbook. It's a guide to how we design user-centred services at the NHSBSA. It's an agreed set of core ideas and intentions to ensure we build the right thing , before building the thing right . It does not replace the Government Service Manual , it is meant to add to, support and clarify how we use standards within the NHSBSA. \"Digital mission statement\"- what is our shared goal as a department? Values Ways of working Principles All of our services should meet the Service Standard, whether or not the service goes to GDS assessment. This is a key feature of building the right thing . User-Centred Agile ways of working All our services should be design-led. We use user research to understand our users' problems, validate assumptions about our services, and iterate our designs using prototypes to address users needs. We then use user stories to help communicate the user needs to the wider team, aid developers and to release incremental value with each sprint. Discovery Alpha Beta Live and continuous improvement Just because a project goes live, doesn't mean the service stops being researched, iterat Designing Our human-centered design process is grounded in the principles of Design Thinking. It's the driving force behind our projects and teams. Designers keep this process alive by helping our teams understand user problems and needs. Together, we collaboratively and continuously ideate, build, and learn. Design in the NHSBSA Test Assumptions, Get Validation, and Eliminate Business Risk Research Frames the Problem or Opportunity We're Solving For Test Usability Frequently What is Interaction Design? What is Service Design? What is visual design? Prototyping Quick and basic to get ideas and designs in front of users Prototyping in HTML and CSS What a prototype is not hint it's not production ready code Where do they lines between prototyping end and production start Research Anyone conducting research interviews, even with NHSBSA colleagues, need to get complete ethics training and gain consent before starting Ethics and informed consent Researcher safety Safeguarding participant data and GDPR Planning One of our primary process goals is to make frequent, small releases of our working software. We do through frequent communication and regular iterations on a service. Processes need to adapt to the needs of the product and team Advisors help enable our project teams for success Daily standups build trust and maintain momentum Nothing beats in-person communication Manage priorities and visualize progress with a lightweight process Meet weekly to discuss successes, failures, and future plans Choose Platforms Early in a project, we have to decide which platforms we'll use. Which platform depends on our ideas for solving these users' problems. After considering what's best for users, the best tools for us have a strong community, make us happy, and help us create and iterate quickly. Browser Testing and Support Laptop Setup TODO Developing Our development practices are evolving, drawing inspiration from agile, human centred and clean coding techniques, first detailed in Kent Beck's classic Extreme Programming Explained: Embrace Change , Gerald Weinberg's The Psychology of Computer Programming and Robert Martin's Clean Code: A Handbook of Agile Software Craftsmanship . Read more about developing in the BSA Testing TODO Production We live in a magical modern era where many problems have already been solved for us. We focus on the core product as much as possible and outsource operations as much as possible to external services. Continuous Delivery Domain Names and DNS Error Tracking Hosting Log Collection Payment Processing Performance Monitoring Production Checklist SSL Certificates Transactional Email KPI's Measuring The difficult part of measuring is deciding what to track. Dave McClure's AARRR framework provides a high-level overview of important metrics. We then use tactics such as event tracking to instrument those metrics. AARRR Framework A/B Testing Feature Flags Instrumentation Subscription Metrics A list of our services TODO Security Best practices\u2026. Communication TODO Communities of practice Our communities of practice are important because\u2026. Service Design Team (Research, Design and Front-End Development) Architecture Development Test GDS assessments TODO Growing our talent We want Digital, Insight and Technology to be an exciting, supportive environment to work in. About this document It is a living document that everyone at the NHSBSA can edit. We've made the playbook free and licensed it as Open Government Licence v2.0. so you may learn from, or use, within your own company. Send any feedback or comments to h.spires@nhs.net","title":"Playbook"},{"location":"#playbook","text":"","title":"Playbook"},{"location":"#about-us","text":"C ollaborative A dventurous R eliable E nergetic a catalyst for better health the delivery partner of choice for the NHS We aim to be an organisation that delivers by focusing on users, introducing new ways of working and using technology & insight as an enabler for change. This is our playbook. It's a guide to how we design user-centred services at the NHSBSA. It's an agreed set of core ideas and intentions to ensure we build the right thing , before building the thing right . It does not replace the Government Service Manual , it is meant to add to, support and clarify how we use standards within the NHSBSA.","title":"About us"},{"location":"#digital-mission-statement-what-is-our-shared-goal-as-a-department","text":"Values","title":"\"Digital mission statement\"- what is our shared goal as a department?"},{"location":"#ways-of-working","text":"","title":"Ways of working"},{"location":"#principles","text":"All of our services should meet the Service Standard, whether or not the service goes to GDS assessment. This is a key feature of building the right thing .","title":"Principles"},{"location":"#user-centred-agile-ways-of-working","text":"All our services should be design-led. We use user research to understand our users' problems, validate assumptions about our services, and iterate our designs using prototypes to address users needs. We then use user stories to help communicate the user needs to the wider team, aid developers and to release incremental value with each sprint. Discovery Alpha Beta Live and continuous improvement Just because a project goes live, doesn't mean the service stops being researched, iterat","title":"User-Centred Agile ways of working"},{"location":"#designing","text":"Our human-centered design process is grounded in the principles of Design Thinking. It's the driving force behind our projects and teams. Designers keep this process alive by helping our teams understand user problems and needs. Together, we collaboratively and continuously ideate, build, and learn. Design in the NHSBSA Test Assumptions, Get Validation, and Eliminate Business Risk Research Frames the Problem or Opportunity We're Solving For Test Usability Frequently What is Interaction Design? What is Service Design? What is visual design?","title":"Designing"},{"location":"#prototyping","text":"Quick and basic to get ideas and designs in front of users Prototyping in HTML and CSS What a prototype is not hint it's not production ready code Where do they lines between prototyping end and production start","title":"Prototyping"},{"location":"#research","text":"Anyone conducting research interviews, even with NHSBSA colleagues, need to get complete ethics training and gain consent before starting Ethics and informed consent Researcher safety Safeguarding participant data and GDPR","title":"Research"},{"location":"#planning","text":"One of our primary process goals is to make frequent, small releases of our working software. We do through frequent communication and regular iterations on a service. Processes need to adapt to the needs of the product and team Advisors help enable our project teams for success Daily standups build trust and maintain momentum Nothing beats in-person communication Manage priorities and visualize progress with a lightweight process Meet weekly to discuss successes, failures, and future plans","title":"Planning"},{"location":"#choose-platforms","text":"Early in a project, we have to decide which platforms we'll use. Which platform depends on our ideas for solving these users' problems. After considering what's best for users, the best tools for us have a strong community, make us happy, and help us create and iterate quickly. Browser Testing and Support","title":"Choose Platforms"},{"location":"#laptop-setup","text":"TODO","title":"Laptop Setup"},{"location":"#developing","text":"Our development practices are evolving, drawing inspiration from agile, human centred and clean coding techniques, first detailed in Kent Beck's classic Extreme Programming Explained: Embrace Change , Gerald Weinberg's The Psychology of Computer Programming and Robert Martin's Clean Code: A Handbook of Agile Software Craftsmanship . Read more about developing in the BSA","title":"Developing"},{"location":"#testing","text":"TODO","title":"Testing"},{"location":"#production","text":"We live in a magical modern era where many problems have already been solved for us. We focus on the core product as much as possible and outsource operations as much as possible to external services. Continuous Delivery Domain Names and DNS Error Tracking Hosting Log Collection Payment Processing Performance Monitoring Production Checklist SSL Certificates Transactional Email KPI's","title":"Production"},{"location":"#measuring","text":"The difficult part of measuring is deciding what to track. Dave McClure's AARRR framework provides a high-level overview of important metrics. We then use tactics such as event tracking to instrument those metrics. AARRR Framework A/B Testing Feature Flags Instrumentation Subscription Metrics","title":"Measuring"},{"location":"#a-list-of-our-services","text":"TODO","title":"A list of our services"},{"location":"#security","text":"Best practices\u2026.","title":"Security"},{"location":"#communication","text":"TODO","title":"Communication"},{"location":"#communities-of-practice","text":"Our communities of practice are important because\u2026. Service Design Team (Research, Design and Front-End Development) Architecture Development Test","title":"Communities of practice"},{"location":"#gds-assessments","text":"TODO","title":"GDS assessments"},{"location":"#growing-our-talent","text":"We want Digital, Insight and Technology to be an exciting, supportive environment to work in.","title":"Growing our talent"},{"location":"#about-this-document","text":"It is a living document that everyone at the NHSBSA can edit. We've made the playbook free and licensed it as Open Government Licence v2.0. so you may learn from, or use, within your own company. Send any feedback or comments to h.spires@nhs.net","title":"About this document"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"design/","text":"Design Most people make the mistake of thinking design is what it looks like. People think it's this veneer \u2014 that the designers are handed this box and told, 'Make it look good!' That's not what we think design is. It's not just what it looks like and feels like. Design is how it works. Steve Jobs What is design There are lots of different kinds of design, within the NHSBSA we have: Service Designers (link) Interaction Designers (link) Content Designers (link) What they all have in common, is that the designer takes time to understand the problem they\u2019re faced with from a range of perspectives, before they create a solution. The Design Council\u2019s Double Diamond model is a visual diagram showing these design stages. The Double Diamond shows the importance of taking time to understand the problem before designing solutions. Each diamond shape illustrates the process of creating or exploring many possible ideas before refining these to the best idea. The first diamond does this to confirm the problem, and the second to design the solution. Design Principles NHS design principles (link) GDS design principles (link) Useful Links Communities confluence page?","title":"Design"},{"location":"design/#design","text":"Most people make the mistake of thinking design is what it looks like. People think it's this veneer \u2014 that the designers are handed this box and told, 'Make it look good!' That's not what we think design is. It's not just what it looks like and feels like. Design is how it works. Steve Jobs","title":"Design"},{"location":"design/#what-is-design","text":"There are lots of different kinds of design, within the NHSBSA we have: Service Designers (link) Interaction Designers (link) Content Designers (link) What they all have in common, is that the designer takes time to understand the problem they\u2019re faced with from a range of perspectives, before they create a solution. The Design Council\u2019s Double Diamond model is a visual diagram showing these design stages. The Double Diamond shows the importance of taking time to understand the problem before designing solutions. Each diamond shape illustrates the process of creating or exploring many possible ideas before refining these to the best idea. The first diamond does this to confirm the problem, and the second to design the solution.","title":"What is design"},{"location":"design/#design-principles","text":"NHS design principles (link) GDS design principles (link)","title":"Design Principles"},{"location":"design/#useful-links","text":"Communities confluence page?","title":"Useful Links"},{"location":"developing/","text":"Developing Source control We follow GDS guidance on maintaining version controlled code . We use Git and Gitlab for production code. We are migrating our legacy codebase from Subversion . Development environment We are agnostic on tool choices, but they must be configured to work well as a team (such as using agreed code styles). The most popular IDEs in use are Eclipse and IntelliJ. If you choose to use Eclipse, there is a pre-built version of Eclipse for Windows. Builds We use Maven as our build tool. Documentation We document our code with a README at the top level of the code repository. We follow 'Clean Code' rules for comments: Always try to explain yourself in code. Don't be redundant. Don't add obvious noise. This includes 'bugfix #' comments Don't use closing brace comments. Don't comment out code. Just remove. Use as explanation of intent. Use as clarification of code. Use as warning of consequences. Technology choice TODO Clean code We encourage that every developer reads Clean Code: A Handbook of Agile Software Craftsmanship . by Robert Martin (a.k.a. Uncle Bob). Test Driven Development We strongly encourage Test Driven Development, but it is not enforced. Try it, you might like it. Technical debt We sometimes have to get things out of the door when we're not completely happy with the way it's working. When this happens we record it as technical debt . We will try to fix debt in the next sprint. Bugs When we get things wrong, defects are raised in Jira. We always try to fix them within the sprint. We try very hard to avoid a backlog of bugs: fix them or accept them as low-priority, won't fix. Refactoring We try to follow the scouting rule of leaving the campsite in a better state than when we found it. To do this we encourage refactoring . Style guide We use the Google style guides . Continuous Integration We perform Continuous Integration builds on every push to a feature branch. A CI build will: Compile Unit Test (Maven Surefire) Integration Test (Maven Failsafe) Enforce automated code quality rules We use Gitlab-CI for our build pipeline. This allows us to run downstream dependencies such as a database in a Docker container. Automated code quality checks We use SonarQube to enforce code quality according to static analysis and code test coverage quality gate. Code reviews We require that all code changes are merged into master by a different developer to the one(s) that made the changes. Gitlab provides a great interface for feedback.","title":"Developing"},{"location":"developing/#developing","text":"","title":"Developing"},{"location":"developing/#source-control","text":"We follow GDS guidance on maintaining version controlled code . We use Git and Gitlab for production code. We are migrating our legacy codebase from Subversion .","title":"Source control"},{"location":"developing/#development-environment","text":"We are agnostic on tool choices, but they must be configured to work well as a team (such as using agreed code styles). The most popular IDEs in use are Eclipse and IntelliJ. If you choose to use Eclipse, there is a pre-built version of Eclipse for Windows.","title":"Development environment"},{"location":"developing/#builds","text":"We use Maven as our build tool.","title":"Builds"},{"location":"developing/#documentation","text":"We document our code with a README at the top level of the code repository. We follow 'Clean Code' rules for comments: Always try to explain yourself in code. Don't be redundant. Don't add obvious noise. This includes 'bugfix #' comments Don't use closing brace comments. Don't comment out code. Just remove. Use as explanation of intent. Use as clarification of code. Use as warning of consequences.","title":"Documentation"},{"location":"developing/#technology-choice","text":"TODO","title":"Technology choice"},{"location":"developing/#clean-code","text":"We encourage that every developer reads Clean Code: A Handbook of Agile Software Craftsmanship . by Robert Martin (a.k.a. Uncle Bob).","title":"Clean code"},{"location":"developing/#test-driven-development","text":"We strongly encourage Test Driven Development, but it is not enforced. Try it, you might like it.","title":"Test Driven Development"},{"location":"developing/#technical-debt","text":"We sometimes have to get things out of the door when we're not completely happy with the way it's working. When this happens we record it as technical debt . We will try to fix debt in the next sprint.","title":"Technical debt"},{"location":"developing/#bugs","text":"When we get things wrong, defects are raised in Jira. We always try to fix them within the sprint. We try very hard to avoid a backlog of bugs: fix them or accept them as low-priority, won't fix.","title":"Bugs"},{"location":"developing/#refactoring","text":"We try to follow the scouting rule of leaving the campsite in a better state than when we found it. To do this we encourage refactoring .","title":"Refactoring"},{"location":"developing/#style-guide","text":"We use the Google style guides .","title":"Style guide"},{"location":"developing/#continuous-integration","text":"We perform Continuous Integration builds on every push to a feature branch. A CI build will: Compile Unit Test (Maven Surefire) Integration Test (Maven Failsafe) Enforce automated code quality rules We use Gitlab-CI for our build pipeline. This allows us to run downstream dependencies such as a database in a Docker container.","title":"Continuous Integration"},{"location":"developing/#automated-code-quality-checks","text":"We use SonarQube to enforce code quality according to static analysis and code test coverage quality gate.","title":"Automated code quality checks"},{"location":"developing/#code-reviews","text":"We require that all code changes are merged into master by a different developer to the one(s) that made the changes. Gitlab provides a great interface for feedback.","title":"Code reviews"},{"location":"values/","text":"Values Fulfilment We maintain an inclusive environment where we can thrive professionally and personally. We maintain a sustainable pace of productivity, and full lives outside of work. We maximize our ability to take on any project by creating a diverse team who can bring their experience and perspectives together to solve problems. We are proud of the work we are doing, and believe that it is meaningful, worth existing, and improves society and human well-being. Self-Management We are able to manage ourselves and don't need someone to tell us what to do in order to be productive. Our first instinct is to take initiative rather than expect a policy or ask for permission. We are able to make decisions on our own, to initiate change, and to take action independently. Taking action independently doesn't mean we do everything alone. Rather, that we know when to collaborate, and when to ask for help. Continuous Improvement We recognise that we can always be better. Therefore, we have strong opinions, loosely held, and take initiative to improve ourselves, the company, and our community. This is a never-ending task, because there is always room for improvement. This week should be better than last, and we should be optimistic that next week will be better than this week. We learn new things, and share those things with our peers and community. While continually working to make things better, we prefer long-term viability over near-term shortcuts. It is more important that the organization exist in five years than it is that we make an extra dollar this year. Trust We expect the best from each other, give each other the benefit of the doubt, encourage each other to take initiative to improve ourselves and the company, and provide direct and constructive help to each other. We show trust and respect for each other by telling the truth, and demonstrate honesty and integrity in our actions. We avoid having private conversations about each other or clients. Instead, we talk in person, and use tools such as Slack, Basecamp, and GitHub to communicate openly within a project, within thoughtbot, and publicly. We want to be able to choose our own tools and bring a respected voice to the way our projects are run. We are not in the room to take orders, we're in the room to collaborate and solve problems. We insist on working for clients who trust our role and experience. We prefer transparency of information whenever possible. We do all of this while maintaining the privacy and confidentiality that every person deserves. Quality We create working, maintainable, and understandable software that is enjoyable and easy to use. We improve the quality of the process and the client's environment. Beyond that, designing and building quality software means improving the security, privacy, and accessibility of the product, and includes improvements of life and reduction of harm for all users and contributors.","title":"Values"},{"location":"values/#values","text":"","title":"Values"},{"location":"values/#fulfilment","text":"We maintain an inclusive environment where we can thrive professionally and personally. We maintain a sustainable pace of productivity, and full lives outside of work. We maximize our ability to take on any project by creating a diverse team who can bring their experience and perspectives together to solve problems. We are proud of the work we are doing, and believe that it is meaningful, worth existing, and improves society and human well-being.","title":"Fulfilment"},{"location":"values/#self-management","text":"We are able to manage ourselves and don't need someone to tell us what to do in order to be productive. Our first instinct is to take initiative rather than expect a policy or ask for permission. We are able to make decisions on our own, to initiate change, and to take action independently. Taking action independently doesn't mean we do everything alone. Rather, that we know when to collaborate, and when to ask for help.","title":"Self-Management"},{"location":"values/#continuous-improvement","text":"We recognise that we can always be better. Therefore, we have strong opinions, loosely held, and take initiative to improve ourselves, the company, and our community. This is a never-ending task, because there is always room for improvement. This week should be better than last, and we should be optimistic that next week will be better than this week. We learn new things, and share those things with our peers and community. While continually working to make things better, we prefer long-term viability over near-term shortcuts. It is more important that the organization exist in five years than it is that we make an extra dollar this year.","title":"Continuous Improvement"},{"location":"values/#trust","text":"We expect the best from each other, give each other the benefit of the doubt, encourage each other to take initiative to improve ourselves and the company, and provide direct and constructive help to each other. We show trust and respect for each other by telling the truth, and demonstrate honesty and integrity in our actions. We avoid having private conversations about each other or clients. Instead, we talk in person, and use tools such as Slack, Basecamp, and GitHub to communicate openly within a project, within thoughtbot, and publicly. We want to be able to choose our own tools and bring a respected voice to the way our projects are run. We are not in the room to take orders, we're in the room to collaborate and solve problems. We insist on working for clients who trust our role and experience. We prefer transparency of information whenever possible. We do all of this while maintaining the privacy and confidentiality that every person deserves.","title":"Trust"},{"location":"values/#quality","text":"We create working, maintainable, and understandable software that is enjoyable and easy to use. We improve the quality of the process and the client's environment. Beyond that, designing and building quality software means improving the security, privacy, and accessibility of the product, and includes improvements of life and reduction of harm for all users and contributors.","title":"Quality"}]}